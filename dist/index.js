export class EntityComponentSystem{constructor(){this.components=[],this.processors=[],this.entities=[]}getProcessorNames(){return this.processors.map(t=>t.name)}getProcessors(){return this.processors}getComponents(){return this.components}getEntities(){return this.entities}hasProcessor(t){return this.processors.find(n=>n.name===t)}hasComponent(t){return this.components.find(n=>n.name===t)}hasEntity(t){return this.entities.find(n=>n.name===t)}createEntity(t,n){let e={name:t,components:n};return n.forEach(t=>{const n=this.components.find(n=>t===n.name);e=Object.assign(e,n.state)}),e}entityHasComponent(t,n){return t.components.includes(n)}removeComponentFromEntity(t,n){if(-1===t.components.indexOf(n))throw new Error("Component not found on entity");{t.components=t.components.filter(t=>t!==n);const e=ECS.getComponent(n);Object.keys(e.state).forEach(n=>{delete t[n]})}}addComponentToEntity(t,n){ECS.entityHasComponent(t,n.name)||(t=Object.assign(t,n.state?n.state:{})).components.push(n.name)}addEntity(t){this.entities.push(t)}addComponent(t){this.components.push(t)}addProcessor(t){this.processors.push(t)}getEntitiesFromComponent(t){return this.entities.filter(n=>n.components.includes(t))}getComponent(t){return this.components.find(n=>t===n.name)}getProcessor(t){return this.processors.find(n=>t===n.name)}getEntity(t){return this.entities.find(n=>t===n.name)}runProcessors(){this.processors.forEach(t=>{const n=this.getEntitiesFromComponent(t.component),e=this.getComponent(t.component);t.update(e,n)})}runCustomLogicOnEntities(){this.entities.forEach(t=>{t.update&&t.update()})}update(){this.runProcessors(),this.runCustomLogicOnEntities()}}
